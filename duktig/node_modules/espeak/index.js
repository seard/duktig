// Generated by CoffeeScript 1.4.0
(function() {
  var Wav, spawn, speak,
    __slice = [].slice;

  spawn = require('child_process').spawn;

  speak = function() {
    var args, argsDefault, buffers, buffersLength, cb, cbCalled, espeak, text, _i;
    text = arguments[0], args = 3 <= arguments.length ? __slice.call(arguments, 1, _i = arguments.length - 1) : (_i = 1, []), cb = arguments[_i++];
    args = args.length ? args[0] : [];
    cbCalled = false;
    buffers = [];
    buffersLength = 0;
    argsDefault = ['--stdin', '--stdout'];
    args = args.concat(argsDefault);
    espeak = spawn(module.exports.cmd, args);
    espeak.stderr.on('data', function(buffer) {
      if (!cbCalled) {
        cbCalled = true;
        return cb(new Error("Failed to spawn eSpeak, make sure it's installed and espeak.cmd is set properly"));
      }
    });
    espeak.stdout.on('data', function(buffer) {
      buffers.push(buffer);
      return buffersLength += buffer.length;
    });
    espeak.stdout.on('end', function() {
      var b, buffer, targetStart, _j, _len;
      if (!cbCalled) {
        cbCalled = true;
        buffer = new Buffer(buffersLength);
        targetStart = 0;
        for (_j = 0, _len = buffers.length; _j < _len; _j++) {
          b = buffers[_j];
          b.copy(buffer, targetStart);
          targetStart += b.length;
        }
        return cb(null, new Wav(buffer));
      }
    });
    espeak.stdin.on('error', function(e) {
      if (e.code === 'EPIPE') {
        return;
      }
      throw e;
    });
    return espeak.stdin.end(text);
  };

  Wav = (function() {

    function Wav(buffer) {
      this.buffer = buffer;
    }

    Wav.prototype.toDataUri = function() {
      return 'data:audio/x-wav;base64,' + this.buffer.toString('base64');
    };

    return Wav;

  })();

  module.exports = {
    speak: speak,
    cmd: 'espeak'
  };

}).call(this);
